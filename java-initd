#!/bin/bash
#
# java-initd:   Starts Java application
#
# chkconfig: - 95 05
# description:  Manages gitven Java application startup daemonization and safe shutdown 
#
### BEGIN INIT INFO
# Provides: java
# Default-Stop: 0 1 6
# Short-Description: Starts Java application
# Description:  Manages gitven Java application startup daemonization and safe shutdown
### END INIT INFO

###
#
# Spawns process in own session as specified user (daemonize).
#
# Stopping will be done in up to three fazes:
#  1. Use STOP_COMMAND if defined than wait for STOP_WAIT until process exits
#  2. Send SIGTERM and wait for STOP_WAIT until process exits
#  3. Send SIGKILL if allowed by ALLOW_KILL and wait for STOP_WAIT until process exits
#
# Note that stop process will send signals to all processes that start process has spawned.
# Note that locking mechanism is based on file locking (flock).
#
# Following variables needs to be defined in sysconfig:
#
# APPLICATION_NAME		name of the application for display purposes (optional)
# WORKING_DIRECTORY		directory to change into before executing start/stop
# PID_FILE				file where pid will be stored
# LOG_FILE				file to redirect process output to
# RUN_USER				user that will be used to run start/stop/status commands
# START_COMMAND			command used to start the process
# STOP_COMMAND			command used to stop the process; %PID substring will be replaced with process PID (optional)
# STOP_WAIT				time in seconds to wait for stop command effect
# ALLOW_KILL			if true SIGKILL may be sent to process if it refuses to stop
#

## Functions

error() {
	echo "$1!" 1>&2
	exit $2
}

ok() {
	if [ -r /etc/rc.d/init.d/functions ]; then
		echo -n "$1"
		echo_success
		echo
	else
		echo "$1 [  OK  ]"
	fi
	exit $2
}

fail() {
	if [ -r /etc/rc.d/init.d/functions ]; then
		echo -n "$1"
		echo_failure
		echo
	else
		echo "$1 [  FAILED  ]"
	fi
	exit $2
}

clean_lock() {
	[[ -w "$INITD_LOCK" ]] && rm -f "$INITD_LOCK"
}

lock_initd() {
	[[ -f "$INITD_LOCK" ]] || touch "$INITD_LOCK" || error "Cannot touch init script lock file '$INITD_LOCK'" 2
	exec 200>>"$INITD_LOCK"
	flock -n 200
}

need_initd_lock() {
	lock_initd || error "Script already running" 2
	# clean_lock on termination
	trap 'clean_lock' 0 1 2 3 6 9 14 15
}

close_fds() {
	# We close all inherited FDs
	# This is important so we don't hold open file or sockets from calling process
	for I in {3..255}; do eval "exec $I>&-"; done
}

aquire_pid_lock() {
	[[ -f "$PID_FILE" ]] || run_as "$RUN_USER" "touch '$PID_FILE'" || error "Cannot touch PID file '$PID_FILE'" 2
	exec 201>>"$PID_FILE"
	flock -n 201
	RET=$?
	[[ $RET > 0 ]] && release_pid_lock
	return $RET
}

release_pid_lock() {
	exec 201<&-
}

## Run command as given user
# If command is not specified than bash script is read from STDIN
# We run in login shell so that the env is the same as with interactive shell
run_as() {
	local RUN_USER="$1"
	local COMMAND="${2:-bash -l -s}"

	if [[ "$USER" == "$RUN_USER" || -z "$RUN_USER" ]]; then
		# We're already the $RUN_AS_USER so just exec the script.
		bash -l -c "$COMMAND"
	else
		[[ "$USER" == "root" ]] || error "Cannot run command '$COMMAND' as user '$RUN_USER': need to be root" 99
		su - $RUN_USER -c "$COMMAND"
	fi
}

daemonize() {
	local RUN_USER="$1"
	local COMMAND="$2"
	local LOG_FILE="$3"
	local PID_FILE="$4"

	# Here we make new process with new session (setsid) and run it with closed STDIN and this init script lock file fd
	# also we make sure that the command stdout is line buffered so we see messages in the log as they are printed
	run_as "$RUN_USER" <<EOF1
setsid bash -s <<EOF2
	cd "$WORKING_DIRECTORY"
	( stdbuf -oL $COMMAND ) 0<&- 200<&- 1>>'$LOG_FILE' 2>&1 &
	echo \\\$! >'$PID_FILE'
EOF2
EOF1
}

pids() {
	run_as "$RUN_USER" "fuser '$PID_FILE' 2>/dev/null | sed -r -e 's,^ +,,' -e 's, +, ,g'"
}

pid() {
	pids | cut -d ' ' -f 1
}

pids_send_signal() {
	local SIGNAL="$1"
	run_as "$RUN_USER" "fuser '$PID_FILE' -s -k -$SIGNAL 2>/dev/null"
}

start() {
	# Note that the fd 201 of the pid file lock will be inherited by the daemon
	aquire_pid_lock || ok "$APPLICATION_NAME already running (PIDs: `pids`)"
	daemonize "$RUN_USER" "$START_COMMAND" "$LOG_FILE" "$PID_FILE"
	release_pid_lock

	ok "$APPLICATION_NAME running (PIDs: `pids`)"
}

wait_while_pids() {
	local SECONDS="$1"
	while [[ `pids` && $(( SECONDS-- )) != 0 ]]; do
		sleep 1
		echo -n '.'
	done
	[[ $SECONDS == -1 ]] && return 1
	return 0
}

wait_pid_lock() {
	local SECONDS="$1"
	[[ -f "$PID_FILE" ]] || return 0
	flock -w "$SECONDS" "$PID_FILE" true
}

stop() {
	[[ `pids` ]] || ok "$APPLICATION_NAME already stopped"
	echo -n "Stopping $APPLICATION_NAME ."

	if [[ "$STOP_COMMAND" ]]; then
		cd "$WORKING_DIRECTORY"
		run_as "$RUN_USER" "${STOP_COMMAND//\%PID/`pid`}"
		wait_while_pids "$STOP_WAIT" && ok " stopped"
	fi

	pids_send_signal TERM
	wait_while_pids "$STOP_WAIT" && wait_pid_lock 2 && ok " terminated"

	if $ALLOW_KILL; then
		pids_send_signal KILL
		wait_while_pids "$STOP_WAIT" && wait_pid_lock 2 && ok " killed"
	fi

	fail " will not stop!" 5
}

# source RedHat startup functions
[[ -r "/etc/rc.d/init.d/functions" ]] && . "/etc/rc.d/init.d/functions"

## Init variables
# source Java conf (JAVA_HOME)
[[ -r "/etc/java/java.conf" ]] && . "/etc/java/java.conf"
export JAVA_HOME

# name of this script (make sure we remove S95 for the name when it is run at startup)
INITD_NAME="`basename $0 | tr ' ' '_' | sed 's/^S[0-9][0-9]//'`"

# the name of managed application
APPLICATION_NAME=${APPLICATION_NAME:-$INITD_NAME}

# lock file for this script
INITD_LOCK="/tmp/java-init-$INITD_NAME.LOCK"

# source test sysconfig if we are testing
[[ -r "test/sysconfig" ]] && . "test/sysconfig"

# source sysconfig variables
[[ -r "/etc/sysconfig/$INITD_NAME" ]] && . "/etc/sysconfig/$INITD_NAME"

# USER variable not always set
USER=${USER:-`id | sed 's/.*(\(.*\)).*gid.*/\1/'`}

## Verify variables
[[ "$WORKING_DIRECTORY" ]] || error "Working directory not defined" 2
[[ -d "$WORKING_DIRECTORY" ]] || error "Working directory '$WORKING_DIRECTORY' not a directory" 2
[[ "$START_COMMAND" ]] || error "Start command not defined" 2
[[ "$LOG_FILE" ]] || error "Log file not defined" 2
[[ "$STOP_WAIT" ]] || error "Stop wait time not defined" 2
[[ "$ALLOW_KILL" ]] || error "Allow kill not defined" 2
[[ "$PID_FILE" ]] || error "PID file not defined" 2

## Execute operation
close_fds

case "$1" in
	start)
		need_initd_lock
		start
	;;
	stop)
		need_initd_lock
		stop
	;;
	restart)
		need_initd_lock
		trap 'start' EXIT
		stop
	;;
	status)
		PIDS=`pids`
		if [[ "$PIDS" ]]; then
			echo "$APPLICATION_NAME is running (PIDs: $PIDS)"
			exit 0
		else
			echo "$APPLICATION_NAME is stopped"
			exit 1
		fi
	;;
	threaddump)
		PID=`pid`
		[[ "$PID" ]] || fail "$APPLICATION_NAME is stopped"
		run_as "$RUN_USER" "kill -SIGQUIT '$PID'"
		ok "SIGQUIT sent to $PID, see $LOG_FILE"
	;;
	*)
		echo "Usage: $INITD_NAME (start|stop|restart|status|threaddump)"
	;;
esac

# vim: set ft=sh sw=4 ts=4 noexpandtab :
